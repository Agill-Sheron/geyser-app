directive @constraint(
  minLength: Int
  maxLength: Int
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  pattern: String
  format: String
  min: Float
  max: Float
  exclusiveMin: Float
  exclusiveMax: Float
  multipleOf: Float
  uniqueTypeName: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
Add BigInt functionality
"""
scalar BigInt

"""
Date custom scalar type
"""
scalar Date

type Query {
  _: Boolean
  project(where: UniqueProjectQueryInput!): Project
  projects(input: ProjectsGetQueryInput): ProjectsResponse!
  projectsSummary: ProjectsSummary!
  me: User
  user(where: UserQueryInput): User!
  statusCheck: Boolean!
  getFunders(input: GetFundersInput!): [Funder]!
  getFundingTxs(input: GetFundingTxsInput): [FundingTx]!
  fundingTx(id: BigInt!): FundingTx!
  getSignedUploadUrl(input: FileUploadInput!): SignedUploadUrl!
  getProjectReward(id: BigInt!): ProjectReward!
  getProjectRewards(input: GetProjectRewardInput!): [ProjectReward]!
  getEntries(input: GetEntriesInput): [Entry]!
  entry(id: BigInt!): Entry!
  getWallet(id: BigInt!): Wallet!
  getProjectPubkey(projectId: BigInt!): String
}

type Mutation {
  _: Boolean
  createProject(input: CreateProjectInput!): Project!
  updateProject(input: UpdateProjectInput!): Project!
  createAmbassador(projectId: BigInt!): Ambassador!
  createSponsor(projectId: BigInt!): Sponsor!
  createGrantee(input: CreateGranteeInput!): Grantee!
  confirmAmbassador(id: BigInt!): Ambassador!
  updateUser(input: UpdateUserInput): User!
  unlinkExternalAccount(id: BigInt!): User!
  fundingConfirm(input: FundingConfirmInput!): FundingConfirmResponse!
  fundingPend(input: FundingPendingInput!): FundingPendingResponse!
  fundingCancel(id: BigInt!): FundingCancelResponse!
  fund(input: FundingInput!): FundingMutationResponse!
  fundingCreateFromPodcastKeysend(
    input: FundingCreateFromPodcastKeysendInput
  ): FundingTx!
  fundingClaimAnonymous(uuid: String!): FundingMutationResponse!
  createProjectReward(input: CreateProjectRewardInput): ProjectReward!
  updateProjectReward(input: UpdateProjectRewardInput): ProjectReward!
  createProjectMilestone(input: CreateProjectMilestoneInput): ProjectMilestone!
  updateProjectMilestone(input: UpdateProjectMilestoneInput): ProjectMilestone!
  deleteProjectMilestone(projectMilestoneId: BigInt!): Boolean!
  createEntry(input: CreateEntryInput!): Entry!
  updateEntry(input: UpdateEntryInput!): Entry!
  publishEntry(id: BigInt!): Entry!
  updateWallet(input: UpdateWalletInput): Wallet!
  createWallet(input: CreateWalletInput): Wallet!
}

type Subscription {
  _: Boolean
}

input PaginationInput {
  cursor: CursorInput
  take: Int
}

input CursorInput {
  id: Int!
}

enum OrderByOptions {
  asc
  desc
}

input CreateProjectInput {
  title: title_String_NotNull_maxLength_50!
  image: String
  name: name_String_NotNull_minLength_5_maxLength_280!
  description: String!
  type: ProjectType
  expiresAt: String
  fundingGoal: fundingGoal_Int_min_1
  rewardCurrency: String
  email: String!
}

scalar title_String_NotNull_maxLength_50

scalar name_String_NotNull_minLength_5_maxLength_280

scalar fundingGoal_Int_min_1

input UpdateProjectInput {
  projectId: BigInt!
  title: String
  image: String
  description: String
  active: Boolean
  draft: Boolean
  expiresAt: String
  type: ProjectType
  rewardCurrency: String
  fundingGoal: fundingGoal_Int_min_1
}

type Project {
  # id: BigInt!
  id: BigInt! @fake(type: number)
  title: String!
  name: String!
  description: String
  balance: Int!
  fundingGoal: fundingGoal_Int_min_1
  createdAt: String!
  updatedAt: String!
  expiresAt: String
  image: String
  active: Boolean!
  draft: Boolean!
  type: ProjectType!
  media: [String]!
  likes: [Like]!
  owners: [Owner]!
  ambassadors: [Ambassador]!
  funders: [Funder]!
  sponsors: [Sponsor]!
  grantees: [Grantee]!
  rewards: [ProjectReward]
  milestones: [ProjectMilestone]
  fundingTxs: [FundingTx]
  entries: [Entry!]!
  wallets: [Wallet!]!
  statistics: ProjectStatistics
}

type ProjectStatistics {
  totalVisitors: Int!
  totalPageviews: Int!
}

enum ProjectType {
  grant
  donation
  reward
}

type Like {
  user: User!
}

input UniqueProjectQueryInput {
  id: BigInt
  name: String
}

input ProjectsGetQueryInput {
  where: ProjectWhereInput
  orderBy: ProjectOrderByInput
  pagination: PaginationInput
}

input ProjectWhereInput {
  id: BigInt
  name: String
  active: Boolean
  type: String
}

input ProjectOrderByInput {
  createdAt: Date
}

type ProjectsSummary {
  projectsCount: Int
  fundersCount: Int
  fundedTotal: Int
}

type ProjectsResponse {
  projects: [Project]!
  summary: ProjectsSummary
}

type GranteeSubmissionResponse {
  success: Boolean!
  message: String!
  grantees: [Grantee]!
}

enum Currency {
  usd
}

input CreateGranteeInput {
  projectId: BigInt!
  name: String!
  url: String!
}

type Ambassador {
  id: BigInt!
  user: User!
  confirmed: Boolean!
}

type Funder {
  id: BigInt!
  user: User
  rewards: [FunderReward]!
  amountFunded: Int
  timesFunded: Int
  confirmed: Boolean!
  confirmedAt: String
}

type Sponsor {
  id: BigInt!
  user: User!
  confirmed: Boolean!
  url: String
  image: String
}

type Owner {
  id: BigInt!
  user: User!
}

type Grantee {
  id: BigInt!
  name: String!
  url: String!
}

type User {
  id: BigInt!
  username: String!
  imageUrl: String
  email: String
  externalAccounts: [ExternalAccount]!
  contributions: [UserProjectContribution]!
  ownerOf: [OwnerOf]!
}

input UpdateUserInput {
  id: BigInt!
  username: String
  imageUrl: String
  email: email_String_format_email
}

scalar email_String_format_email

type ExternalAccount {
  id: BigInt!
  type: String!
  externalId: String!
  externalUsername: String!
  public: Boolean!
}

type OwnerOf {
  project: Project
  owner: Owner
}

type UserProjectContribution {
  isAmbassador: Boolean!
  isFunder: Boolean!
  isSponsor: Boolean!
  funder: Funder
  project: Project!
}

input UserQueryInput {
  id: BigInt
}

input ResourceInput {
  resourceId: BigInt!
  resourceType: FundingResourceType!
}

enum FundingResourceType {
  project
  entry
  user
}

input GetFundersInput {
  where: GetFunderWhereInput
  orderBy: GetFundersOrderByInput
  pagination: PaginationInput
}

input GetFunderWhereInput {
  confirmed: Boolean
  sourceResourceInput: ResourceInput
}

input GetFundersOrderByInput {
  amountFunded: OrderByOptions!
}

type FundingConfirmResponse {
  id: BigInt!
  success: Boolean!
  missedSettleEvents: Int!
}

type FundingPendingResponse {
  id: BigInt!
  success: Boolean!
}

type FundingCancelResponse {
  id: BigInt!
  success: Boolean!
}

type FunderReward {
  projectReward: ProjectReward!
  quantity: Int!
}

type FundingTx {
  id: BigInt! @fake(type: number)
  uuid: String!
  invoiceId: String!
  address: String
  paymentRequest: String
  amount: Int!
  status: FundingStatus!
  comment: String
  # media: String
  media: String @fake(type: imageUrl, options: { randomizeImageUrl: true })
  paidAt: Date
  funder: Funder!
  onChain: Boolean!
  source: String!
  sourceResource: SourceResource
}

type FundingMutationResponse {
  fundingTx: FundingTx
  amountSummary: AmountSummary
}

type FundingQueryResponse {
  success: Boolean!
  message: String!
  fundingTx: FundingTx
}

type AmountSummary {
  total: Int!
  donationAmount: Int!
  shippingCost: Int!
  rewardsCost: Int!
}

input FundingInput {
  sourceResourceInput: ResourceInput!
  projectId: BigInt!
  anonymous: Boolean!
  donationInput: DonationFundingInput
  rewardInput: RewardFundingInput
  metadataInput: FundingMetadataInput
}

input FundingMetadataInput {
  email: email_String_format_email
  comment: comment_String_maxLength_280
  media: String
}

scalar comment_String_maxLength_280

input DonationFundingInput {
  donationAmount: donationAmount_Int_NotNull_min_1_max_15000000!
}

scalar donationAmount_Int_NotNull_min_1_max_15000000

input RewardFundingInput {
  rewardsCost: rewardsCost_Int_NotNull_min_0_max_15000000!
  shipping: ShippingInput
  rewards: [RewardInput!]!
}

scalar rewardsCost_Int_NotNull_min_0_max_15000000

input ShippingInput {
  cost: cost_Int_NotNull_min_0_max_1500000!
  destination: ShippingDestination!
}

scalar cost_Int_NotNull_min_0_max_1500000

input RewardInput {
  id: BigInt!
  quantity: quantity_Int_NotNull_min_1!
}

scalar quantity_Int_NotNull_min_1

input GetFundingTxsInput {
  where: GetFundingTxsWhereInput
  orderBy: GetFundingTxsOrderByInput
  pagination: PaginationInput
}

input GetFundingTxsWhereInput {
  sourceResourceInput: ResourceInput
}

input GetFundingTxsOrderByInput {
  paidAt: OrderByOptions!
}

input FundingConfirmInput {
  amount: Int!
  paidAt: Date!
  onChain: FundingConfirmOnChainInput
  offChain: FundingConfirmOffChainInput
}

input FundingPendingInput {
  onChain: FundingPendingOnChainInput!
}

input FundingCreateFromPodcastKeysendInput {
  projectId: BigInt!
  amount: Int!
  paidAt: Date!
  appName: String!
  externalUsername: String
  externalId: String
  comment: String
}

input FundingConfirmOnChainInput {
  address: String!
}

input FundingPendingOnChainInput {
  address: String!
}

input FundingConfirmOffChainInput {
  bolt11: FundingConfirmOffChainBolt11Input!
}

input FundingConfirmOffChainBolt11Input {
  invoiceId: String!
  settleIndex: Int!
}

enum FundingStatus {
  unpaid
  pending
  paid
  canceled
}

enum ShippingDestination {
  national
  international
}

union SourceResource = Project | Entry

type SignedUploadUrl {
  uploadUrl: String!
  distributionUrl: String!
}

input FileUploadInput {
  name: String
  type: String
}

type ProjectReward {
  id: BigInt!
  name: String!
  description: String
  cost: Float!
  image: String
  backers: Int!
    @deprecated(reason: "Deprecated field please use 'sold' instead")
  deleted: Boolean!
  stock: Int!
  sold: Int!
}

input GetProjectRewardInput {
  where: GetProjectRewardWhereInput!
}

input GetProjectRewardWhereInput {
  projectId: BigInt!
  deleted: Boolean
}

input CreateProjectRewardInput {
  projectId: BigInt!
  name: String!
  description: String!
  cost: cost_Float_NotNull_min_1_max_50000000!
  image: String
  stock: stock_Int_min_0
}

scalar cost_Float_NotNull_min_1_max_50000000

scalar stock_Int_min_0

input UpdateProjectRewardInput {
  projectRewardId: BigInt!
  name: String!
  description: String
  cost: cost_Float_NotNull_min_1_max_50000000!
  image: String
  deleted: Boolean
  stock: stock_Int_min_0
}

type ProjectMilestone {
  id: BigInt!
  name: String!
  description: String
  amount: Float!
}

input CreateProjectMilestoneInput {
  projectId: BigInt!
  name: String!
  description: String!
  amount: amount_Float_NotNull_min_1!
}

scalar amount_Float_NotNull_min_1

input UpdateProjectMilestoneInput {
  projectMilestoneId: BigInt!
  name: String
  description: String
  amount: amount_Float_min_1
}

scalar amount_Float_min_1

input GetEntriesInput {
  where: GetEntriesWhereInput
  orderBy: GetEntriesOrderByInput
  pagination: PaginationInput
}

input GetEntriesWhereInput {
  projectId: BigInt
}

input GetEntriesOrderByInput {
  publishedAt: OrderByOptions
}

input CreateEntryInput {
  title: String!
  description: String!
  image: String
  content: String
  type: EntryType!
  projectId: BigInt!
}

input UpdateEntryInput {
  entryId: BigInt!
  title: String
  description: String
  image: String
  content: String
}

type Entry {
  # id: BigInt!
  id: BigInt! @fake(type: number)
  title: String! @fake(type: productName)
  description: String!
  image: String!
  content: String
  published: Boolean!
  createdAt: String!
  updatedAt: String!
  publishedAt: String
  type: EntryType!
  creator: User!
  project: Project
  fundingTxs: [FundingTx]!
  fundersCount: Int!
  amountFunded: Int!
}

enum EntryType {
  article
  podcast
  video
}

input CreateWalletInput {
  name: String
  resourceInput: ResourceInput!
  lndConnectionDetailsInput: LndConnectionDetailsCreateInput
}

input UpdateWalletInput {
  id: BigInt!
  name: String
  lndConnectionDetailsInput: LndConnectionDetailsUpdateInput
}

input LndConnectionDetailsUpdateInput {
  macaroon: String
  tlsCertificate: String
  hostname: String
  grpcPort: Int
  pubkey: String
}

input LndConnectionDetailsCreateInput {
  macaroon: String!
  tlsCertificate: String
  hostname: String!
  grpcPort: Int!
  lndNodeType: LndNodeType!
  pubkey: String!
}

interface LndConnectionDetails {
  macaroon: String!
  tlsCertificate: String
  hostname: String!
  grpcPort: Int!
  lndNodeType: LndNodeType!
}

type LndConnectionDetailsPublic {
  pubkey: String!
}

type LndConnectionDetailsPrivate {
  macaroon: String!
  tlsCertificate: String
  hostname: String!
  grpcPort: Int!
  lndNodeType: LndNodeType!
  pubkey: String!
}

type Wallet {
  id: BigInt!
  name: String!
  connectionDetails: ConnectionDetails!
}

union ConnectionDetails =
    LndConnectionDetailsPrivate
  | LndConnectionDetailsPublic

enum LndNodeType {
  voltage
  geyser
  custom
}
